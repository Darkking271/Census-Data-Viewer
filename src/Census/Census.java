/*
 * This program will take user requests, and display census information 
 * accordingly
 */
package Census;

import java.text.DecimalFormat;
import java.util.Arrays;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.io.*;
import java.net.*;
import Cache.*;

/**
 *
 * @author Alex <your.name at your.org>
 */
public class Census extends javax.swing.JFrame
{
    static final int currentYear = 2016;
    static final int yearNum = 3;
    static PopStats anualPop[] = new PopStats[yearNum];
    static String monthNames[] = {"January", "Febuary", "March", "April", 
                                  "May", "June", "July", "August",
                                  "September", "October", "November", "December"};
    static String stateNames[] = {"Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut",
                                  "Delaware", "District of Columbia", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana",
                                  "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", 
                                  "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico",
                                  "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Puerto Rico",
                                  "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", 
                                  "Washington", "West Virginia", "Wisconsin", "Wyoming"};
    static BTree<String> tree;
    static KMeans<String> clusters;
    static int surNames = 1000;
    /**
     * Creates new form CensusGUI
     */
    public Census() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        button2016 = new javax.swing.JButton();
        button2015 = new javax.swing.JButton();
        button2014 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        surNameText = new javax.swing.JTextField();
        surNameButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        startYearText = new javax.swing.JTextField();
        startMonthText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        endYearText = new javax.swing.JTextField();
        endMonthText = new javax.swing.JTextField();
        correlationButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        yearTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        catField = new javax.swing.JTextField();
        monthButton = new javax.swing.JButton();
        stateButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        button2016.setText("2016");
        button2016.setToolTipText("Display 2016");
        button2016.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2016ActionPerformed(evt);
            }
        });

        button2015.setText("2015");
        button2015.setToolTipText("Display 2015");
        button2015.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2015ActionPerformed(evt);
            }
        });

        button2014.setText("2014");
        button2014.setToolTipText("Display 2014");
        button2014.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2014ActionPerformed(evt);
            }
        });

        jLabel7.setText("Anual Stats");

        jLabel8.setText("Last Name:");

        surNameText.setBackground(new java.awt.Color(255, 255, 255));
        surNameText.setForeground(new java.awt.Color(51, 51, 51));
        surNameText.setToolTipText("");
        surNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surNameTextActionPerformed(evt);
            }
        });

        surNameButton.setText("Search Name");
        surNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surNameButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Starting Month: ");

        jLabel5.setText("Year:");

        startYearText.setBackground(new java.awt.Color(255, 255, 255));
        startYearText.setForeground(new java.awt.Color(51, 51, 51));

        startMonthText.setBackground(new java.awt.Color(255, 255, 255));
        startMonthText.setForeground(new java.awt.Color(51, 51, 51));
        startMonthText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMonthTextActionPerformed(evt);
            }
        });

        jLabel6.setText("Month:");

        jLabel4.setText("Ending Month:");

        endYearText.setBackground(new java.awt.Color(255, 255, 255));
        endYearText.setForeground(new java.awt.Color(51, 51, 51));

        endMonthText.setBackground(new java.awt.Color(255, 255, 255));
        endMonthText.setForeground(new java.awt.Color(51, 51, 51));

        correlationButton.setText("Show Correlation");
        correlationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correlationButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Year :");

        yearTextField.setBackground(new java.awt.Color(255, 255, 255));
        yearTextField.setForeground(new java.awt.Color(51, 51, 51));
        yearTextField.setToolTipText("Enter Year");
        yearTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Month or State:");

        catField.setBackground(new java.awt.Color(255, 255, 255));
        catField.setForeground(new java.awt.Color(51, 51, 51));
        catField.setToolTipText("Enter Month or State");
        catField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catFieldActionPerformed(evt);
            }
        });

        monthButton.setText("Month");
        monthButton.setToolTipText("Search Month");
        monthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthButtonActionPerformed(evt);
            }
        });

        stateButton.setText("State");
        stateButton.setToolTipText("Search State");
        stateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.setToolTipText("Clear Display");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(catField)
                    .addComponent(yearTextField)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(monthButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(stateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(18, 18, 18))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(8, 8, 8)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(startYearText)
                            .addComponent(endYearText, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel5))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(correlationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(startMonthText)
                                .addComponent(endMonthText, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(surNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(surNameButton))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(surNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(surNameButton)
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startYearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(startMonthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(endYearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(endMonthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(correlationButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(yearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(catField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monthButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stateButton)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(button2016, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button2015, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(button2014, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button2016)
                    .addComponent(button2015))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button2014)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 226, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        textArea.setBackground(new java.awt.Color(255, 255, 255));
        textArea.setColumns(20);
        textArea.setForeground(new java.awt.Color(51, 51, 51));
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void monthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthButtonActionPerformed
        try
        {
            if (this.yearTextField.getText().isEmpty())
            {
                this.textArea.append("No Year Entered\n\n");
            }
            else
            {
                int realYear = Integer.parseInt(this.yearTextField.getText());
                int year = currentYear - realYear;

                if (this.catField.getText().isEmpty())
                {
                    if (year < anualPop.length && year >= 0)
                    {
                        this.textArea.append(realYear + " Population by Month\n\n");
                        for (int i = 0; i < monthNames.length; i++)
                        {
                            this.textArea.append(monthNames[i] + ": " + anualPop[year].getMonthPop(monthNames[i]) + "\n");
                        }
                        this.textArea.append("\n");
                    }
                    else
                        this.textArea.append("No such year exists\n");
                }
                else
                {
                    String month = getMonth(this.catField.getText());
                    if ((year < anualPop.length && year >= 0))
                    {
                        if (anualPop[year].containsMonth(month))
                        {
                            int pop = anualPop[year].getMonthPop(month);
                            this.textArea.append(realYear + " - " + month + ": " + pop + "\n\n");
                            findMonthSimilarity(year, month, pop);
                        }
                        else
                            this.textArea.append("No such month exists\n");
                    }
                    else
                        this.textArea.append("No such year exists\n");
                }
            }
            this.yearTextField.setText("");
            this.catField.setText("");
        }
        catch (Exception e)
        {
            this.textArea.append("Invalid Year Entered!\n");
        }
    }//GEN-LAST:event_monthButtonActionPerformed
    
    private void findMonthSimilarity(int year, String month, int pop)
    {
        int diff;
        int greaterMin = 0;
        int lesserMin = 0;
        String greaterMonth = "";
        String lesserMonth = "";
        for (int i =0; i < monthNames.length; i++)
        {
            if (!month.equals(monthNames[i]))
            {
                if (anualPop[year].getMonthPop(monthNames[i]) > pop)
                { 
                    diff = anualPop[year].getMonthPop(monthNames[i]) - pop;
                    if (greaterMin == 0)
                    {
                        greaterMin = diff;
                        greaterMonth = monthNames[i];
                    }
                    else if (greaterMin > diff)
                    {
                        greaterMin = diff;
                        greaterMonth = monthNames[i];
                    }
                }
                else if (anualPop[year].getMonthPop(monthNames[i]) < pop)
                {
                    diff = pop - anualPop[year].getMonthPop(monthNames[i]);
                    if (lesserMin == 0)
                    {
                        lesserMin = diff;
                        lesserMonth = monthNames[i];
                    }
                    else if (lesserMin > diff)
                    {
                        lesserMin = diff;
                        lesserMonth = monthNames[i];
                    }
                }
                else if (anualPop[year].getStatePop(stateNames[i]) == pop)
                {
                    this.textArea.append("The month of " + monthNames[i] + " has an identical population to " + month + "\n");
                }
            }
        }
        if (!greaterMonth.equals(""))
        {
          this.textArea.append("The most similar month with a greater population than " + month + " is \n" + greaterMonth
                                + " with a population of " + anualPop[year].getMonthPop(greaterMonth) + "\n\n");
        }
        if (!lesserMonth.equals(""))
        {
            this.textArea.append("The most similar month with a lesser population than " + month + " is \n" + lesserMonth
                                + " with a population of " + anualPop[year].getMonthPop(lesserMonth) + "\n\n");
        }
    }
    private String getMonth(String month)
    {
        for (int i = 0; i < monthNames.length; i++)
        {
            if(month.toLowerCase().equals(monthNames[i].toLowerCase()))
                return monthNames[i];
        }
        return "";
    }
    private void stateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateButtonActionPerformed
        try
        {
            if (this.yearTextField.getText().isEmpty())
            {
                this.textArea.append("No Year Entered\n\n");
            }
            else
            {
                int realYear = Integer.parseInt(this.yearTextField.getText());
                int year = currentYear - realYear;

                if (this.catField.getText().isEmpty())
                {
                    if (year < anualPop.length && year >= 0)
                    {
                        this.textArea.append(realYear + " Population by State\n\n");
                        for (String s : anualPop[year].getStateSet())
                        {
                            this.textArea.append(s + ": " + anualPop[year].getStatePop(s) + "\n");
                        }
                        this.textArea.append("\n");
                    }
                    else
                        this.textArea.append("No such year exists\n");

                }
                else
                {
                    String state = getState(this.catField.getText());
                    if (year < anualPop.length && year >= 0)
                    {
                        if (anualPop[year].containsState(state))
                        {
                            int pop = anualPop[year].getStatePop(state);
                            this.textArea.append(realYear + " - " + state + ": " + pop + "\n\n");
                            findStateSimilarity(year, state, pop);
                        }
                        else
                            this.textArea.append("No such state exists\n");
                    }
                    else
                        this.textArea.append("No such year exists\n");
                }
            }
            this.yearTextField.setText("");
            this.catField.setText("");
        }
        catch (Exception e)
        {
            this.textArea.append("Invalid Year Entered!\n");
        }
    }//GEN-LAST:event_stateButtonActionPerformed

    private void findStateSimilarity(int year, String state, int pop)
    {
        int diff;
        int greaterMin = 0;
        int lesserMin = 0;
        String greaterState = "";
        String lesserState = "";
        for (int i =0; i < stateNames.length; i++)
        {
            if (!state.equals(stateNames[i]))
            {
                if (anualPop[year].getStatePop(stateNames[i]) > pop)
                { 
                    diff = anualPop[year].getStatePop(stateNames[i]) - pop;
                    if (greaterMin == 0)
                    {
                        greaterMin = diff;
                        greaterState = stateNames[i];
                    }
                    else if (greaterMin > diff)
                    {
                        greaterMin = diff;
                        greaterState = stateNames[i];
                    }
                }
                else if (anualPop[year].getStatePop(stateNames[i]) < pop)
                {
                    diff = pop - anualPop[year].getStatePop(stateNames[i]);
                    if (lesserMin == 0)
                    {
                        lesserMin = diff;
                        lesserState = stateNames[i];
                    }
                    else if (lesserMin > diff)
                    {
                        lesserMin = diff;
                        lesserState = stateNames[i];
                    }
                }
                else if (anualPop[year].getStatePop(stateNames[i]) == pop)
                {
                    this.textArea.append("The state " + stateNames[i] + " has an identical population to " + state + "\n");
                }
            }
        }
        if (!greaterState.equals(""))
        {
            this.textArea.append("The most similar state with a greater population than " + state + " is \n" + greaterState
                                + " with a population of " + anualPop[year].getStatePop(greaterState) + "\n\n");
        }
        if (!lesserState.equals(""))
        {
            this.textArea.append("The most similar state with a lesser population than " + state + " is \n" + lesserState
                                + " with a population of " + anualPop[year].getStatePop(lesserState) + "\n\n");
        }
    }
    
    private String getState(String state)
    {
        for (int i = 0; i < stateNames.length; i++)
        {
            if(state.toLowerCase().equals(stateNames[i].toLowerCase()))
                return stateNames[i];
        }
        return "";
    }
    
    private void yearTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearTextFieldActionPerformed
        
    }//GEN-LAST:event_yearTextFieldActionPerformed

    private void catFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_catFieldActionPerformed

    private void button2016ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2016ActionPerformed
        this.textArea.setText("");
        this.textArea.setText("2016 Population Stats\n\n");
        this.textArea.append("Total Population: " + Integer.toString(anualPop[0].getPop()) + "\n\n");
        this.textArea.append("Population by state\n\n");
        for (String s : anualPop[0].getStateSet())
        {
            this.textArea.append(s + ": " + anualPop[0].getStatePop(s) + "\n");
        }
        this.textArea.append("\nPopulation by month\n\n");
        for (int i = 0; i < monthNames.length; i++)
        {
            this.textArea.append(monthNames[i] + ": " + anualPop[0].getMonthPop(monthNames[i]) + "\n");
        }
        this.textArea.append("\n");
        this.textArea.setCaretPosition(0);
    }//GEN-LAST:event_button2016ActionPerformed

    private void button2015ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2015ActionPerformed
        this.textArea.setText("");
        this.textArea.setText("2015 Population Stats\n\n");
        this.textArea.append("Total Population: " + Integer.toString(anualPop[1].getPop()) + "\n\n");
        this.textArea.append("Population by state\n\n");
        for (String s : anualPop[1].getStateSet())
        {
            this.textArea.append(s + ": " + anualPop[1].getStatePop(s) + "\n");
        }
        this.textArea.append("\nPopulation by month\n\n");
        for (int i = 0; i < monthNames.length; i++)
        {
            this.textArea.append(monthNames[i] + ": " + anualPop[1].getMonthPop(monthNames[i]) + "\n");
        }
        this.textArea.append("\n");
        this.textArea.setCaretPosition(0);
    }//GEN-LAST:event_button2015ActionPerformed

    private void button2014ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2014ActionPerformed
        this.textArea.setText("");
        this.textArea.setText("2014 Population Stats\n\n");
        this.textArea.append("Total Population: " + Integer.toString(anualPop[2].getPop()) + "\n\n");
        this.textArea.append("Population by state\n\n");
        for (String s : anualPop[2].getStateSet())
        {
            this.textArea.append(s + ": " + anualPop[2].getStatePop(s) + "\n");
        }
        this.textArea.append("\nPopulation by month\n\n");
        for (int i = 0; i < monthNames.length; i++)
        {
            this.textArea.append(monthNames[i] + ": " + anualPop[2].getMonthPop(monthNames[i]) + "\n");
        }
        this.textArea.append("\n");
        this.textArea.setCaretPosition(0);
    }//GEN-LAST:event_button2014ActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        this.textArea.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void correlationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correlationButtonActionPerformed
        try
        {
            this.textArea.setText("");

            if (startMonthText.getText().isEmpty() ||
                startYearText.getText().isEmpty() ||
                endMonthText.getText().isEmpty() ||
                endYearText.getText().isEmpty())
            {
                this.textArea.append("Please enter all info!\n\n");
                if (startYearText.getText().isEmpty())
                    this.textArea.append("Enter starting year\n");
                if (startMonthText.getText().isEmpty())
                    this.textArea.append("Enter starting month\n");
                if (endYearText.getText().isEmpty())
                    this.textArea.append("Enter ending year\n");
                if (endMonthText.getText().isEmpty())
                    this.textArea.append("Ener ending month\n");
                this.textArea.append("\n");
            }
            else
            {
                String startMonth = getMonth(startMonthText.getText());
                String endMonth =  getMonth(endMonthText.getText());
                int realStartYear = Integer.parseInt(startYearText.getText());
                int startYear = currentYear - realStartYear;
                int realEndYear = Integer.parseInt(endYearText.getText());
                int endYear = currentYear - realEndYear;
                ArrayList<Double> pop = new ArrayList<>();
                ArrayList<Double> month = new ArrayList<>();
                double totalPop = 0;
                double totalMonth = 0;
                double count = 0;
                double xy = 0;
                if ((startYear < anualPop.length && startYear >= 0) &&
                    (endYear < anualPop.length && endYear >= 0) &&
                    (anualPop[startYear].containsMonth(startMonth)) &&
                    (anualPop[endYear].containsMonth(endMonth)))
                {
                    int startMonthNum = Arrays.asList(monthNames).indexOf(startMonth);
                    int endMonthNum = Arrays.asList(monthNames).indexOf(endMonth);
                    if (startYear > endYear)
                    {
                        this.textArea.append("Correlation of Population from " + realStartYear + " " + startMonth +
                                             " to " + realEndYear + " " + endMonth +"\n\n");
                        for (int i = startYear; i >= endYear; i--)
                        {
                            if (i == startYear)
                            {
                                this.textArea.append(realStartYear + " Population by Month\n\n");
                                for (int x = startMonthNum; x < monthNames.length; x++)
                                {
                                    this.textArea.append(monthNames[x] + ": " + anualPop[i].getMonthPop(monthNames[x]) + "\n");
                                    totalPop += anualPop[i].getMonthPop(monthNames[x]);
                                    count++;
                                    totalMonth += count;
                                    pop.add((double)anualPop[i].getMonthPop(monthNames[x]));
                                    month.add((double)count);
                                    xy += (anualPop[i].getMonthPop(monthNames[x]) * count); 
                                }
                                this.textArea.append("\n");
                            }
                            else if (startYear > i && i > endYear)
                            {
                                int realMidYear = Math.abs(i - currentYear);
                                this.textArea.append(realMidYear + "Population by Month\n\n");
                                for (int x = 0; x < monthNames.length; x++)
                                {
                                    this.textArea.append(monthNames[x] + ": " + anualPop[i].getMonthPop(monthNames[x]) + "\n");
                                    totalPop += anualPop[i].getMonthPop(monthNames[x]);
                                    count++;
                                    totalMonth += count;
                                    pop.add((double)anualPop[i].getMonthPop(monthNames[x]));
                                    month.add((double)count);
                                    xy += (anualPop[i].getMonthPop(monthNames[x]) * count);
                                }
                                this.textArea.append("\n");
                            }
                            else if (i == endYear)
                            {
                                this.textArea.append(realEndYear + " Population by Month\n\n");
                                for (int x = 0; x <= endMonthNum; x++)
                                {
                                    this.textArea.append(monthNames[x] + ": " + anualPop[i].getMonthPop(monthNames[x]) + "\n");
                                    totalPop += anualPop[i].getMonthPop(monthNames[x]);
                                    count++;
                                    totalMonth += count;
                                    pop.add((double)anualPop[i].getMonthPop(monthNames[x]));
                                    month.add((double)count);
                                    xy += (anualPop[i].getMonthPop(monthNames[x]) * count);
                                }
                                this.textArea.append("\n");
                            }
                        }

                        this.startYearText.setText("");
                        this.startMonthText.setText("");
                        this.endMonthText.setText("");
                        this.endYearText.setText("");
                    }
                    else if (startYear == endYear)
                    {
                        if (startMonthNum < endMonthNum)
                        {
                            this.textArea.append(realStartYear + " Popuation by Month\n\n");
                            for (int i = startMonthNum; i <= endMonthNum; i++)
                            {
                                this.textArea.append(monthNames[i] + ": " + anualPop[startYear].getMonthPop(monthNames[i]) + "\n");
                                totalPop += anualPop[startYear].getMonthPop(monthNames[i]);
                                count++;
                                totalMonth += count;
                                pop.add((double)anualPop[startYear].getMonthPop(monthNames[i]));
                                month.add((double)count);
                                xy += (anualPop[startYear].getMonthPop(monthNames[i]) * count);
                            }
                            this.textArea.append("\n");
                            this.textArea.append("\n");
                        }
                        else
                            this.textArea.append("Invalid Month Range\n\n");

                        this.startYearText.setText("");
                        this.startMonthText.setText("");
                        this.endMonthText.setText("");
                        this.endYearText.setText("");
                    }
                    else
                        this.textArea.append("Invalid Year Range\n\n");


                    DecimalFormat dec = new DecimalFormat ("#.###");
                    double totalCorelation =  calcCorel(totalPop, totalMonth, count, xy, pop, month);
                    this.textArea.append("The corelation for this range of months is " + dec.format(totalCorelation) + "\n");
                    
                    if (totalCorelation > 0)
                    {
                        if (totalCorelation >= 0.5)
                            this.textArea.append("According to this data, the population has had a steady increase\n\n");
                        else
                            this.textArea.append("According to this data, the population has increased but with no pattern\n\n");
                    }
                    else if (totalCorelation == 0)
                        this.textArea.append("According to this dataa, there is no increase or deccrease in population\n\n");
                    else if (totalCorelation < 0)
                    {
                        if (totalCorelation <= 0.5)
                            this.textArea.append("According to this data, the population has had a steady decrease\n\n");
                        else
                            this.textArea.append("According to this dta, the population has decreased but with no pattern\n\n");
                    }
                }
                else
                {
                    this.textArea.append("Bad info given!\n\n");
                    if (!(startYear < anualPop.length && startYear >= 0))
                        this.textArea.append("Starting year " + realStartYear + " is a year that does not exist\n\n");
                    if (startYear < anualPop.length && startYear >= 0)
                    {
                        if (!anualPop[startYear].containsMonth(startMonth))
                            this.textArea.append("Starting month " + startMonthText.getText() + " is not a month that exists\n\n");
                    }
                    if (!(endYear < anualPop.length && endYear >= 0))
                        this.textArea.append("Ending year " + realEndYear + " is not a year that exists\n\n");
                    if (endYear < anualPop.length && endYear >= 0)
                    {
                        if (!anualPop[endYear].containsMonth(endMonth))
                            this.textArea.append("Ending month " + endMonthText.getText() + " is not a month that exists\n\n");
                    }
                }
            }
        }
        catch (Exception e)
        {
            this.textArea.append("Invalid Year Entered!");
        }
    }//GEN-LAST:event_correlationButtonActionPerformed

    private void startMonthTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMonthTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startMonthTextActionPerformed

    private void surNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_surNameTextActionPerformed

    private void surNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surNameButtonActionPerformed
        try {
            if (this.surNameText.getText().isEmpty()) {
                this.textArea.setText("");
                this.textArea.append("Top " + this.surNames + " Occuring Lastnames\n\n");
                for (String s : tree.keySet()) {
                    this.textArea.append(s + ": " + tree.get(s) + "\n");
                }
                this.textArea.append("\n");
            } else {
                String name = this.surNameText.getText().toUpperCase();
                ArrayList<String> clusterNames;
                if (tree.containsKey(name)) {
                    this.textArea.append(name + ": " + tree.get(name) +"\n\n");
                    this.textArea.append("Lastnames With Similar Occurences to " + name + "\n");
                    clusterNames = new ArrayList<>(clusters.getCluster(name, tree.get(name)));
                    for(String s : clusterNames){
                        this.textArea.append(s + "\n");
                    }
                    this.textArea.append("\n");
                } else {
                    this.textArea.append("Lastname Not Found!");
                }
            }
        }catch(IOException e){e.printStackTrace();}
    }//GEN-LAST:event_surNameButtonActionPerformed

    private double calcCorel(double totalPop, double totalMonth, double count, double xy, ArrayList<Double> pop, ArrayList<Double> month)
    {
        double popAve = totalPop / count;
        double monthAve = totalMonth / count;
        ArrayList<Double> a = calcSD(pop, popAve, count);
        ArrayList<Double> b = calcSD(month, monthAve, count);
        
        double total = 0;
        for (int i = 0; i < count; i++)
        {
            total += a.get(i) * b.get(i);
        }
        double numerator = total;
        
        double totalAA = 0;
        double totalBB = 0;
        for (int i = 0; i < count; i++)
        {
            totalAA += Math.pow(a.get(i), 2);
            totalBB += Math.pow(b.get(i), 2);
        }
        double denominator = Math.sqrt((totalAA * totalBB));
        double corelation = numerator / denominator;
        return corelation;
    }
    
    private ArrayList calcSD(ArrayList<Double> list, double ave, double count)
    {
        ArrayList<Double> copy = new ArrayList<>();
        for (int i = 0; i < count; i ++)
        {
            copy.add(list.get(i) - ave);
        }
        return copy;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception
    {
        System.out.println("Loading...");
        load();
        System.out.println("Loaded!");
        //clusters.displayLists();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Census.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Census.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Census.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Census.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Census().setVisible(true);
            }
        });
    }
    private static void load()
    {
        //&key=70938b51725b84860251b1b3ac7dc6ecb2974cb2
        try{Loader.createFiles();}
        catch(IOException i) {
            infoBox("No Network Connection", "Error!");
            System.exit(0);
        }
        String s = File.separator;
        String loc = System.getProperty("user.dir") + s + "runfiles" + s;
        //Build popStats from file
        try {
            for (int i = 0; i < yearNum; i++) {
                int year = currentYear - i;
                anualPop[i] = new PopStats(loc + "month" + year + ".pop",
                        loc + "state" + year + ".pop",
                        loc + "total" + year + ".pop");
            }
            //Build BTree from file
            tree = new BTree<String>(loc + "root.bt", loc + "value.raf");

            //Build Clusters from file
            clusters = null;
            FileInputStream fileIn =
                    new FileInputStream(loc + "clusters.clu");
            ObjectInputStream in =
                    new ObjectInputStream(fileIn);
            clusters = (KMeans)in.readObject();
            in.close();
            fileIn.close();

        }catch(Exception e){
            e.printStackTrace();
        }
    }

    public static void infoBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, titleBar, JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button2014;
    private javax.swing.JButton button2015;
    private javax.swing.JButton button2016;
    private javax.swing.JTextField catField;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton correlationButton;
    private javax.swing.JTextField endMonthText;
    private javax.swing.JTextField endYearText;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton monthButton;
    private javax.swing.JTextField startMonthText;
    private javax.swing.JTextField startYearText;
    private javax.swing.JButton stateButton;
    private javax.swing.JButton surNameButton;
    private javax.swing.JTextField surNameText;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField yearTextField;
    // End of variables declaration//GEN-END:variables

}
